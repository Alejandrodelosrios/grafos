/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package No_Pesados;

import Excepciones.AristaNoExisteException;
import Excepciones.AristaYaExisteException;
import Utileria.Warshall;
import Utileria.BFS;
import Utileria.Ciclo;
import Utileria.Conexo;
import Utileria.DFS;
import Utileria.DFSModificado;
import Utileria.OrdenamientoTopologico;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author EQUIPO
 */
public class FormularioGrafo extends javax.swing.JFrame {
     DiGrafo grafo;
    /**
     * Creates new form FormularioGrafo
     */
    public FormularioGrafo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCargarVertices = new javax.swing.JButton();
        jInsertar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jBFS = new javax.swing.JButton();
        jDFS = new javax.swing.JButton();
        jCantidadVertice = new javax.swing.JButton();
        jCantidadArista = new javax.swing.JButton();
        jInsertarAristas = new javax.swing.JButton();
        jeliminarAristas = new javax.swing.JButton();
        jEliminarVertice = new javax.swing.JButton();
        jGradoVertice = new javax.swing.JButton();
        jGradoDeEntrada = new javax.swing.JButton();
        jGradoDeSalida = new javax.swing.JButton();
        jAlgortimoDWarshall = new javax.swing.JButton();
        jOrdTopologico = new javax.swing.JButton();
        jHayCiClos = new javax.swing.JButton();
        jContadorDeIslas = new javax.swing.JButton();
        jConexo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCargarVertices.setText("cargar ");
        jCargarVertices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCargarVerticesActionPerformed(evt);
            }
        });

        jInsertar.setText("insertar");
        jInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInsertarActionPerformed(evt);
            }
        });

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane1.setViewportView(jTextArea);

        jBFS.setText("BFS");
        jBFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFSActionPerformed(evt);
            }
        });

        jDFS.setText("DFS");
        jDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDFSActionPerformed(evt);
            }
        });

        jCantidadVertice.setText("cantVertice");
        jCantidadVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCantidadVerticeActionPerformed(evt);
            }
        });

        jCantidadArista.setText("cantAristas");
        jCantidadArista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCantidadAristaActionPerformed(evt);
            }
        });

        jInsertarAristas.setText("insertarAristas");
        jInsertarAristas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInsertarAristasActionPerformed(evt);
            }
        });

        jeliminarAristas.setText("eliminarAristas");
        jeliminarAristas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jeliminarAristasActionPerformed(evt);
            }
        });

        jEliminarVertice.setText("eliminarVertice");
        jEliminarVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEliminarVerticeActionPerformed(evt);
            }
        });

        jGradoVertice.setText("grado de vertice");
        jGradoVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGradoVerticeActionPerformed(evt);
            }
        });

        jGradoDeEntrada.setText("grado de entrada");
        jGradoDeEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGradoDeEntradaActionPerformed(evt);
            }
        });

        jGradoDeSalida.setText("grado de salida");
        jGradoDeSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGradoDeSalidaActionPerformed(evt);
            }
        });

        jAlgortimoDWarshall.setText("warshall");
        jAlgortimoDWarshall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAlgortimoDWarshallActionPerformed(evt);
            }
        });

        jOrdTopologico.setText("ord topologico");
        jOrdTopologico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrdTopologicoActionPerformed(evt);
            }
        });

        jHayCiClos.setText("hayCiclos");
        jHayCiClos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHayCiClosActionPerformed(evt);
            }
        });

        jContadorDeIslas.setText("contador de islas");
        jContadorDeIslas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jContadorDeIslasActionPerformed(evt);
            }
        });

        jConexo.setText("Conexo");
        jConexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConexoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jInsertar)
                .addGap(18, 18, 18)
                .addComponent(jCargarVertices)
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jInsertarAristas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jeliminarAristas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jEliminarVertice))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBFS)
                                .addGap(34, 34, 34)
                                .addComponent(jDFS)
                                .addGap(30, 30, 30)
                                .addComponent(jCantidadVertice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCantidadArista))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jGradoVertice)
                                .addGap(44, 44, 44)
                                .addComponent(jGradoDeEntrada)
                                .addGap(18, 18, 18)
                                .addComponent(jGradoDeSalida))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jConexo)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jAlgortimoDWarshall)
                                .addGap(34, 34, 34)
                                .addComponent(jOrdTopologico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jHayCiClos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jContadorDeIslas)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCargarVertices)
                    .addComponent(jInsertar))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBFS)
                    .addComponent(jDFS)
                    .addComponent(jCantidadVertice)
                    .addComponent(jCantidadArista))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jInsertarAristas)
                    .addComponent(jeliminarAristas)
                    .addComponent(jEliminarVertice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jGradoVertice)
                    .addComponent(jGradoDeEntrada)
                    .addComponent(jGradoDeSalida))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAlgortimoDWarshall)
                    .addComponent(jOrdTopologico)
                    .addComponent(jHayCiClos)
                    .addComponent(jContadorDeIslas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jConexo)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFSActionPerformed
     int posVertice=Integer.parseInt(JOptionPane.showInputDialog("ingrese el vertice que quiere comenzar"));
     BFS recorrido=new BFS(this.grafo,posVertice);
     jTextArea.append(recorrido.getRecorrido().toString());
        // TODO add your handling code here:
    }//GEN-LAST:event_jBFSActionPerformed

    private void jCargarVerticesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCargarVerticesActionPerformed
     int nroDeVertice=Integer.parseInt(JOptionPane.showInputDialog("ingree la cantidad de vertices")); 
     grafo=new DiGrafo(nroDeVertice);
        // TODO add your handling code here:
    }//GEN-LAST:event_jCargarVerticesActionPerformed

    private void jInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInsertarActionPerformed
     grafo.insertarVertice();
        // TODO add your handling code here:
    }//GEN-LAST:event_jInsertarActionPerformed

    private void jEliminarVerticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEliminarVerticeActionPerformed
     int posVertice=Integer.parseInt(JOptionPane.showInputDialog("ingrese el vertice que quiere eliminar"));
     grafo.eliminarVertice(posVertice);
        // TODO add your handling code here:
    }//GEN-LAST:event_jEliminarVerticeActionPerformed

    private void jeliminarAristasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jeliminarAristasActionPerformed
     int x=Integer.parseInt(JOptionPane.showInputDialog("ingrese el vertice Origen"));
     int y=Integer.parseInt(JOptionPane.showInputDialog("ingrese el vertice Destino"));
         try {
             grafo.eliminarArista(x,y);
             // TODO add your handling code here:
         } catch (AristaNoExisteException ex) {
            JOptionPane.showMessageDialog(null,"no existe arista entre estos vertices");
         }
    }//GEN-LAST:event_jeliminarAristasActionPerformed

    private void jInsertarAristasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInsertarAristasActionPerformed
    int x=Integer.parseInt(JOptionPane.showInputDialog("ingrese el vertice Origen"));
    int y=Integer.parseInt(JOptionPane.showInputDialog("ingrese el vertice Destino"));
         try {
             grafo.insertarArista(x,y);            
             // TODO add your handling code here:
         } catch (AristaYaExisteException ex) {
           JOptionPane.showMessageDialog(null,"existe una arista entre estos vertices");
         }
    }//GEN-LAST:event_jInsertarAristasActionPerformed

    private void jCantidadAristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCantidadAristaActionPerformed
    JOptionPane.showMessageDialog(null,"la cantidad de aristas es: "+grafo.cantidadDeAristas());
        // TODO add your handling code here:
    }//GEN-LAST:event_jCantidadAristaActionPerformed

    private void jCantidadVerticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCantidadVerticeActionPerformed
        JOptionPane.showMessageDialog(null,"la cantidad de vertices es: "+grafo.cantidadVertices());       
        // TODO add your handling code here:
    }//GEN-LAST:event_jCantidadVerticeActionPerformed

    private void jDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDFSActionPerformed
     int posVertice=Integer.parseInt(JOptionPane.showInputDialog("ingrese el vertice que quiere comenzar"));
     DFS recorrido=new DFS(this.grafo,posVertice);
     jTextArea.append(recorrido.getRecorrido().toString());

        // TODO add your handling code here:
    }//GEN-LAST:event_jDFSActionPerformed

    private void jGradoVerticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGradoVerticeActionPerformed
   int x=Integer.parseInt(JOptionPane.showInputDialog("ingrese un vertice para ver su grado"));
   JOptionPane.showMessageDialog(null,"el grado del vertice es de: "+grafo.gradoDeVertice(x));
        // TODO add your handling code here:
    }//GEN-LAST:event_jGradoVerticeActionPerformed

    private void jGradoDeEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGradoDeEntradaActionPerformed
       int x=Integer.parseInt(JOptionPane.showInputDialog("ingrese un vertice para ver su grado"));
  // JOptionPane.showMessageDialog(null,"el grado del vertice es de: "+grafo.gradoDeEntrada(x));
        // TODO add your handling code here:
    }//GEN-LAST:event_jGradoDeEntradaActionPerformed

    private void jGradoDeSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGradoDeSalidaActionPerformed
      int x=Integer.parseInt(JOptionPane.showInputDialog("ingrese un vertice para ver su grado"));
//   JOptionPane.showMessageDialog(null,"el grado del vertice es de: "+grafo.gradoDeSalida(x));

        // TODO add your handling code here:
    }//GEN-LAST:event_jGradoDeSalidaActionPerformed

    private void jAlgortimoDWarshallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAlgortimoDWarshallActionPerformed
     Warshall prueba=new Warshall(grafo);
     boolean[][] matrizDeCamino=prueba.ejecutarAlgoritmo();
     jTextArea.append(prueba.imprimir(matrizDeCamino));
        // TODO add your handling code here:
    }//GEN-LAST:event_jAlgortimoDWarshallActionPerformed

    private void jOrdTopologicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrdTopologicoActionPerformed
    OrdenamientoTopologico ordenamiento=new OrdenamientoTopologico(grafo);
    Iterable<Integer>listaDelOrdenamiento;
    listaDelOrdenamiento = ordenamiento.getOrdenamientoTopologico();
             jTextArea.append(listaDelOrdenamiento.toString());
        // TODO add your handling code here:*/
    }//GEN-LAST:event_jOrdTopologicoActionPerformed

    private void jHayCiClosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHayCiClosActionPerformed
        Ciclo tieneCiclos = new Ciclo(this.grafo);
       if(tieneCiclos.hayCiclosEnGrafo()){
         JOptionPane.showMessageDialog(null,"el grafo tiene ciclo");
       }else{
        JOptionPane.showMessageDialog(null,"el grafo no tiene ciclo");   
       }
    }//GEN-LAST:event_jHayCiClosActionPerformed

    private void jContadorDeIslasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jContadorDeIslasActionPerformed
      DFS recorrido=new DFS(this.grafo,0);
/*    JOptionPane.showMessageDialog(null,"la cantidad de islas: "+
            recorrido.contadorDeIslasDiGragros());*/
        // TODO add your handling code here:
    }//GEN-LAST:event_jContadorDeIslasActionPerformed

    private void jConexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConexoActionPerformed
     Conexo esConexo=new Conexo(this.grafo);
      if(esConexo.esDebilmenteConexo()){
        JOptionPane.showMessageDialog(null,"el grafo es debilmente conexo");
       }else{
        JOptionPane.showMessageDialog(null,"el grafo no es debilmente conexo");   
       }   
        // TODO add your handling code here:
    }//GEN-LAST:event_jConexoActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioGrafo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAlgortimoDWarshall;
    private javax.swing.JButton jBFS;
    private javax.swing.JButton jCantidadArista;
    private javax.swing.JButton jCantidadVertice;
    private javax.swing.JButton jCargarVertices;
    private javax.swing.JButton jConexo;
    private javax.swing.JButton jContadorDeIslas;
    private javax.swing.JButton jDFS;
    private javax.swing.JButton jEliminarVertice;
    private javax.swing.JButton jGradoDeEntrada;
    private javax.swing.JButton jGradoDeSalida;
    private javax.swing.JButton jGradoVertice;
    private javax.swing.JButton jHayCiClos;
    private javax.swing.JButton jInsertar;
    private javax.swing.JButton jInsertarAristas;
    private javax.swing.JButton jOrdTopologico;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JButton jeliminarAristas;
    // End of variables declaration//GEN-END:variables
}
